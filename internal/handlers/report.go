package handlers

import (
	"fmt"
	"strings"
	"time"

	"money-bot/internal/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func HandleReport(bot *tgbotapi.BotAPI, update tgbotapi.Update, s *storage.Storage, period string) {
	var (
		from, to    time.Time
		reportTitle string
	)

	switch period {
	case "today":
		from, to = GetStartAndEndOfDay()
		reportTitle = "–ò—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
	case "week":
		from, to = GetStartAndEndOfWeek()
		reportTitle = "–ò—Ç–æ–≥–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"
	case "month":
		from, to = GetStartAndEndOfMonth()
		reportTitle = "–ò—Ç–æ–≥–∏ –∑–∞ –º–µ—Å—è—Ü"
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
		bot.Send(msg)
		return
	}

	transactions, err := s.GetTransactionsByPeriod(update.Message.From.ID, from, to)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
		bot.Send(msg)
		return
	}

	if len(transactions) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("%s: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reportTitle))
		bot.Send(msg)
		return
	}

	var responseText strings.Builder
	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
	title := strings.ReplaceAll(reportTitle, "_", "\\_")
	responseText.WriteString(fmt.Sprintf("üìä *%s* üìä\n\n", title))

	var totalIncome, totalExpense float64
	for _, tr := range transactions {
		if tr.Amount > 0 {
			totalIncome += tr.Amount
		} else {
			totalExpense += tr.Amount
		}
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
		sign := ""
		if tr.Amount < 0 {
			sign = "‚ûñ"
		} else {
			sign = "‚ûï"
		}
		// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º `.` –≤ —Å—É–º–º–µ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
		amountStr := strings.ReplaceAll(fmt.Sprintf("%.2f", tr.Amount), ".", "\\.")
		comment := strings.ReplaceAll(tr.Comment, "_", "\\_")
		responseText.WriteString(fmt.Sprintf("%s `%s` —Ä—É–±\\. \\| %s\n", sign, amountStr, comment))
	}

	responseText.WriteString("\n\\-\\-\\-\n")
	responseText.WriteString(fmt.Sprintf("üí∞ *–î–æ—Ö–æ–¥—ã*: `%s` —Ä—É–±\\.", strings.ReplaceAll(fmt.Sprintf("%.2f", totalIncome), ".", "\\.")))
	responseText.WriteString(fmt.Sprintf("\nüí∏ *–†–∞—Å—Ö–æ–¥—ã*: `%s` —Ä—É–±\\.", strings.ReplaceAll(fmt.Sprintf("%.2f", totalExpense), ".", "\\.")))
	responseText.WriteString(fmt.Sprintf("\nüìà *–ë–∞–ª–∞–Ω—Å*: `%s` —Ä—É–±\\.", strings.ReplaceAll(fmt.Sprintf("%.2f", totalIncome+totalExpense), ".", "\\.")))

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, responseText.String())
	msg.ParseMode = tgbotapi.ModeMarkdownV2
	bot.Send(msg)
}
